/* ASR- epc_arp_icmp_api arp_icmp_get_dest_mac_address(...) call tree */
dp/main.c
{
 	...
	Ln 139  dp/main.c <<s1u_pkt_handler>>
         		update_nexthop_info(pkts, n, &pkts_mask, app.sgi_port);
 	Ln 233  dp/main.c <<sgi_pkt_handler>>
            	update_nexthop_info(pkts, n, &pkts_mask, app.s1u_port);
	...
}::
::dp/dataplane.c
{	...
	Ln 722  dp/dataplane.c <<update_nexthop_info>>
            	if (construct_ether_hdr(pkts[i], portid) < 0)
	...
}::
::dp/ether.c
{
	..
	int construct_ether_hdr(struct rte_mbuf *m, uint8_t portid)
	{
		...
        dst_ip = ntohl(ipv4_hdr->dst_addr);
		...
		if (!arp_icmp_get_dest_mac_address(dst_ip, portid, &hw_addr, &dst_ip)) {
			RTE_LOG(DEBUG, DP, "%s: ARP lookup failed for ip 0x%x\n", _func__, dst_ip);
			return -1;
		}
		...
	}
	...
}::
::dp/pipeline/epc_arp_icmp.c:
{
	...
	int arp_icmp_get_dest_mac_address(__rte_unused const uint32_t ipaddr, const uint32_t phy_port, struct rte_ether_addr *hw_addr, uint32_t *nhip)
	{
		...
  		tmp_arp_key.port_id = phy_port;
		tmp_arp_key.ip = htonl(*nhip);	// SK fix
		...
  		ret_arp_data = retrieve_arp_entry(tmp_arp_key);
		...
  		if (NULL != ret_arp_data) {
    		if (ret_arp_data->status == INCOMPLETE) {
      			printf("ARPICMP status INCOMPLETE for port %d, ip: ", phy_port);
      			return 0;
    		}
    	rte_ether_addr_copy(&ret_arp_data->eth_addr, hw_addr);
    	return 1;
  	}
  	return 0;
	}
}

/* ASR- epc_arp_icmp_api background call tree */
dp/pipeline/epc_packet_framework.c:
{
	...
	static void epc_init_lcores(void)
	{
		...
		epc_alloc_lcore(epc_arp_icmp, NULL, epc_app.core_mct); // SK
		...
	}
	...
	void epc_init_packet_framework(uint8_t sgi_port_id, uint8_t s1u_port_id)
	{
		...
		epc_arp_icmp_init();
		...
	}
	...
}::

::dp/pipeline/epc_arp_icmp.c:
{
	/**** arp data structures ****/
	#include epc_arp_icmp.h:
	{
		struct pipeline_arp_icmp_arp_key_ipv4 {
		uint32_t ip;
		uint8_t port_id;
		uint8_t filler1;
		uint8_t filler2;
		uint8_t filler3;
		};
	}

	struct arp_entry_data {
	  struct rte_ether_addr eth_addr;
	  uint8_t port;
	  uint8_t status;
	  uint32_t ip;
	  ...
	} __attribute__((packed));

	struct arp_port_address {
	  uint32_t ip;
	  struct rte_ether_addr *mac_addr;
	};
	extern struct rte_ether_addr ports_eth_addr[];
	static struct arp_port_address arp_port_addresses[RTE_MAX_ETHPORTS];
	...

	/**** arp functions ****/
	void epc_arp_icmp(__rte_unused void *arg)
	{
		struct epc_arp_icmp_params *param = &ai_params;
		rte_pipeline_run(myP);
		if (++param->flush_count >= param->flush_max) {
    		rte_pipeline_flush(myP);
		}
	}

	void epc_arp_icmp_init(void)
	{
		...
    	struct rte_pipeline_port_in_params port_params = {
	      ...
	      .f_action = port_in_ah_arp_icmp_key,
	      ...
    	};
    	get_mac_ip_addr(arp_port_addresses, i);
		...
		/* create the arp_icmp mbuf rx pool */
		arp_icmp_pktmbuf_tx_pool =
			rte_pktmbuf_pool_create("arp_icmp_mbuf_tx_pool", NB_ARPICMP_MBUF, 32,
      		0, RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());

		arp_queued_pktmbuf_tx_pool =
			rte_pktmbuf_pool_create("arp_queued_pktmbuf_tx_pool", NB_ARPICMP_MBUF			, 32, 0, RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());
		...
		arp_icmp_pkt = rte_pktmbuf_alloc(arp_icmp_pktmbuf_tx_pool);
		...
		arp_hash_params.socket_id = rte_socket_id();
		arp_hash_handle = rte_hash_create(&arp_hash_params);
	}

	static void get_mac_ip_addr(struct arp_port_address *addr, uint8_t port_id)
	{
		if (app.s1u_port == port_id) {
	    addr[port_id].ip = htonl(app.s1u_ip);	// SK added htonl()
	    addr[port_id].mac_addr = &app.s1u_ether_addr;
	  } else if (app.sgi_port == port_id) {
	    addr[port_id].ip = htonl(app.sgi_ip);	//SK added htonl()
	    addr[port_id].mac_addr = &app.sgi_ether_addr;
	  } else {
	    printf("Unknown input port\n");
	  }
	}

	static int port_in_ah_arp_icmp_key(struct rte_pipeline *p, struct rte_mbuf **pkts, uint32_t n, void *arg)
	{
		...
		for (i = 0; i < n; i++) {
			if (pkts[i])	pkt_work_arp_icmp_key(pkts[i], arg);
		return 0;
		}
	}

	static inline void pkt_work_arp_icmp_key(struct rte_mbuf *pkt, void *arg)
	{
		...
		if (eth_h->ether_type == rte_cpu_to_be_16(RTE_ETHER_TYPE_ARP)) {
			...
			if(...) {
				...
			}
			else {
				get_mac_ip_addr(arp_port_addresses, in_port_id);
      				if (arp_h->arp_data.arp_tip != arp_port_addresses[in_port_id].ip)
					{
						printf("ARP requested IP address mismatches interface IP - discarding\n");
					}
					else if (arp_h->arp_op == rte_cpu_to_be_16(RTE_ARP_OP_REQUEST)) {
						/* ASR- Send reply to ARP REQ */
				        populate_arp_entry(&arp_h->arp_data.arp_sha, arp_h->arp_data.arp_sip, in_port_id);
				        // build reply
				        req_tip = arp_h->arp_data.arp_tip;
				        rte_ether_addr_copy(&eth_h->s_addr, &eth_h->d_addr);
				        rte_ether_addr_copy(arp_port_addresses[in_port_id].mac_addr, &eth_h->s_addr); // set sender mac address
						...
						// send packet
						...
						rte_pipeline_port_out_packet_insert(myP, in_port_id, pkt1);
					}
				    else if (arp_h->arp_op == rte_cpu_to_be_16(RTE_ARP_OP_REPLY)) {
						/* ASR- populate_arp_entry with the ARP_REPLY */
						populate_arp_entry(&arp_h->arp_data.arp_sha, arp_h->arp_data.arp_sip, in_port_id);
					}
					...
			}
		}
  		else {
			//ICMP
		}
	}

	int send_arp_req(unsigned port_id, uint32_t ip)
	{
		...
		printf("Enter send_arp_req..\n");
		struct rte_mbuf *arp_pkt = rte_pktmbuf_alloc(arp_icmp_pktmbuf_tx_pool);
		...
	}

	static struct arp_entry_data *retrieve_arp_entry(struct pipeline_arp_icmp_arp_key_ipv4 arp_key)
	{
		struct arp_entry_data * ret_arp_data = NULL;
  		int ret = rte_hash_lookup_data(arp_hash_handle, &arp_key, (void **)&ret_arp_data);
		if (ret < 0)
		{
			/* add INCOMPLETE arp entry */
			ret_arp_data = rte_malloc_socket(NULL, sizeof(struct arp_entry_data), RTE_CACHE_LINE_SIZE, rte_socket_id());
			/* ASR- ARP ENTRY INCOMPLETE- null_ether_addr */
			rte_ether_addr_copy(&null_ether_addr, &ret_arp_data->eth_addr);
			ret_arp_data->status = INCOMPLETE;
			ret_arp_data->port = arp_key.port_id;
			ret_arp_data->ip = arp_key.ip;
			...
			ret_arp_data->queue = rte_ring_create(inet_ntoa(
					*((struct in_addr *)&arp_key.ip)), 128, rte_socket_id(), RING_F_SP_ENQ | RING_F_SC_DEQ
					);
			...
    		rte_hash_add_key_data(arp_hash_handle, &arp_key, ret_arp_data);
    		/* send arp request */
			/* ASR- Send ARP REQ to get: null_ether_addr=next_hop_hw_addr */
		    send_arp_req(arp_key.port_id, arp_key.ip);
  		}
		...
		return ret_arp_data;
	}

	static void populate_arp_entry(const struct rte_ether_addr * hw_addr, uint32_t ipaddr, uint8_t portid)
	{
		...
  		struct pipeline_arp_icmp_arp_key_ipv4 arp_key;
		arp_key.port_id = portid;
		arp_key.ip = ipaddr;
		struct arp_entry_data* arp_data = retrieve_arp_entry(arp_key);
  		if (arp_data)
		{
    		if (rte_is_same_ether_addr(&arp_data->eth_addr, hw_addr))	{
			...
			printf("arp_entry exists ip%x, port %d\n", arp_key.ip, arp_key.port_id);
	      	return;
			}
			else
			{
				rte_ether_addr_copy(hw_addr, &arp_data->eth_addr);
	      		if (arp_data->status == INCOMPLETE) {
					while (!rte_ring_empty(arp_data->queue))
			  		{
						...
						DQUEUE ARP PACKETS...
					}
    	    	arp_data->status = COMPLETE;
				}
			}
		}
		else
		{
    		arp_data = rte_malloc_socket(NULL, sizeof(struct arp_entry_data), RTE_CACHE_LINE_SIZE, rte_socket_id());
		    rte_ether_addr_copy(hw_addr, &arp_data->eth_addr);
		    arp_data->status = COMPLETE;
		    arp_data->port = portid;
		    arp_data->ip = ipaddr;
		   	arp_data->queue = NULL;
	   		rte_hash_add_key_data(arp_hash_handle, &arp_key, arp_data);
  		}
	}
}

---------------------------------------------------------------
June 28, 2019
epc_arp_icmp.c function list:
 241 static int add_arp_data(...)
 282 int arp_queue_unresolved_packet(...)
 355 arp_op_name(...)
 499 retrieve_arp_entry(...)
 605 arp_send_buffered_pkts(...)
 674 populate_arp_entry(...)
 741 get_mac_ip_addr(...)
 755 send_arp_req(...)
 801 pkt_work_arp_icmp_key(...)
 991 static int port_in_ah_arp_icmp_key(...)
 1005 epc_arp_icmp_init(...)
 1170 void epc_arp_icmp(...)

---------------------------------------------------------------


---------------------------------------------------------------
Mon Mar 19 18:47:29 PDT 2018
Vishnu: Added call flows for ARP_REQUEST, ARP_REPLY and RARP

ARP_REQUEST
If (request for S1U mac) {
	rarp_ran_macip() // ASR
	// StoreeNodeBToArpCache() // to be added
	update_port_arp_tbl()	{	//pkt_work_arp_icmp_key() {
		get_mac_ip_addr()
		populate_arp_entry() {
			arp_data  = retrieve_arp_entry()
			if (arp_data) {
				if(pkts_buffered) { // entry is marked as INCOMPLETE
					arp_send_buffered_pkts() {
						rte_ring_dequeue(pkts)
						rte_pipeline_port_out_packet_insert(S1U_port)
					}
					mark status as COMPLETE
				}
			} else {
				// add entry to ARP hash with COMPLETE status
				add_arp_data();
			}
		}
		// create ARP response
		rte_pipeline_port_out_packet_insert(S1U_port)
	}
} else {
	UpdateNextHopInfo() {
		arp_data = NULL;
		if (arp_data = retrieve_arp_entry()) {
			if (arp_data == INCOMPLETE) {
				arp_queue_unresolved_packet(pkt)
			}
		} else {
			/* could not add entry to cache */
			RTE_LOG(DEBUG, DP, "%s: ARP lookup failed for ip 0x%x\n");
			return -1;
		}
		copy (mac into pkt)
		return;
	}
}


ARP_RESPONSE // Currently response is received on mct core
If (RESPONSE for AS mac) { // received on SGI
	pkt_work_arp_icmp_key() {
		get_mac_ip_addr()
		populate_arp_entry() {
			arp_data  = retrieve_arp_entry()
			if (arp_data) {
				if(pkts_buffered) { // entry is marked as INCOMPLETE
					arp_send_buffered_pkts() {
						rte_ring_dequeue(pkts)
						rte_pipeline_port_out_packet_insert(SGI_port)
					}
					mark status as COMPLETE
				}
			} else {
				// add entry to ARP hash with COMPLETE status
				add_arp_data();
			}
		}
		rte_pipeline_port_out_packet_insert(S1U_port)
	}
}

